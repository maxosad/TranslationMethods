то есть как что он должен генерировать 

Expr = Term + Expr {Add $1 $3} | Term - Expr | Term ;
Term = Factor * Term | Factor / Term | Factor;
Factor = ( Expr ) | Num | Ident ;
Num = [0..9]+
Ident = [a..Z]+
у нас есть выражение 1 * 2 + 3 - 5 - 4^2
он должен еще и генерить конструкторы в которых мы хотим это представить 

Expr = Term + Expr {Add $1 $3} -- data Expr = Add Expr Expr | 
Descr -- набор слов и операторов 
{-
expr = term *> token '+' *> expr <|>  term *> token '-' *> expr <|> term
term = factor *> token '*' *> term | factor  *> token '/' *> term | factor;
factor = token '(' *> expr *> token ')' <|> num

-}



что делать дальше я смог распарсить грамматику , которую написал. 
Теперь по этой грамматике мне надо сгенерировать код. 
Какой по итогу должен быть код ?
Какой код мы хотим сгенерить по 
  e = "Expr = Factor + Expr {Add $1 $3} | Factor { $1 } ; Factor = #qwerty# { $1}; "
    expr :: Parser ...
    expr = (do
      v1 <- pure factor 
      v2 <- pure token '+'
      v3 <- pure expr
      return (Add v1 v3)) 
      <|> 
      (do
       v1 <- factor 
       return v1)
    
    
    factor :: Parser ... -- думаю что эти типы пока лучше не писать 
    factor = do
      v1 <- token "qwerty"
      return v1
      
мб нам ответят как правильно делать <|> но 
нам все равно нужно будет писать v1 v2 и тд 
можно пока занятся этим



мы сделали <|> для do 
теперь надо занятся токенами 
можно для них генерировать tokens word
только как эти tokens мы будем задавать можно сказать что все что в '[' ']' и через запятую то это токены
или погоди или на этом моменте я должен написать лексер?



т.е. у нас есть СГЕНЕРИРОВАННЫЙ(happy alex) лексер и парсер для грамматики 
но мы должны еще и сами написать лексер и сгенерировать парсер 
которыми мы будем разбирать строку, поданную на вход

Я хотел проверить то что я нагенерил но не сходятся типы 

Parser.Val генерируется там где не надо 
Expr = Term + Expr {Plus $1 $3} | Term - Expr {Minus $1 $3} | Term {$1} ;
Term = Num * Term {Mul $1 $3}| Num / Term {Division $1 $3}| Num{$1};
Num = #0# {$1} | #1# {$1} ;



думаю надо обрабатывать операторы через chainl1, chainr1 
Мы ничего не должны удалять т.к. в будующем надо уметь делать 
Logic:
  Arithm #<# Arithm
это правило не создает ни левого ветвления ни правой рекурсии 



добавил val даже Pa менять не пришлось 

теперь добавим Rep


Exp :
  Term {$1}
  | Term Rep {Eval $1 $2}
Rep :
  '+' Term {[(Add $2)]}
  | '-' Term {[(Sub $2)]}
  | '-' Term Rep {(Sub $2) : $3}
  | '+' Term Rep {(Add $2) : $3}


Expr = Term + Expr {Plus $1 $3} | Term - Expr {Minus $1 $3} | Term {$1} ;
Term = Num * Term {Mul $1 $3}| Num / Term {Division $1 $3}| Num{$1};
Num = #0# {Val $1} | #1# {Val $1} ;


работает но надо ли нам оно мб просто chainl1 chainr1 для
операторов и что и как это будет выглядеть 

%left '+' '-' 

Expr :
  Expr '+' Expr 
  num {Val}
  
subexpr = num 'chainl1' addsub

кажется что легче грамматику поменять 
написать поддержку массива 


в мт3 нету вложенных конструкторов поэтому будем делать поддержку массива в конструкторе

если нам вернули массив то что мы должны нагенерить 
у нас массив вложенных конструкторов


Expr : 
  num {Val $1} 
  | num Rep {Eval $1 $2}
  
Rep : 
 
  | '-' num {[Sub $2]} 
  | '-' num Rep {(Sub $2) : $3}





expr = do
  do
    v1 <- num
    return (Val v1)
  <|> do
    v1 <- num
    v2 <- Rep
    return (Eval v1 v2)
    
rep = do
  do
    v1 -> tokens "-"
    v2 -> num
    return ([(Sub v2)]
  <|> do
    v1 -> tokens "-"
    v2 -> num
    v3 <- rep 
    return ((Sub v2) : v3)
    
    
    
нужно сделать обработку вложенных конструкторов 
'(' Constructor ')'
нам придется сделать в место Args[Int]
Args [Constructor]
тогда в 
должен нагенерить 


Expr = Term Rep {Eval ( Eval $1) $2}
expr = do
  do 
    v1 < term
    v2 < rep 
    return Parser.Eval (Eval v1) v2) 
    
нагенерил   
expr = do
  do
    v1 <- term
    v2 <- rep
    return (Parser.Eval vConstrname "Eval" [Inv 1] v2)  


21.02.2022
Expr = Term Rep {Eval $1 $2} | Term {Zn $1} ;
Rep =   - Term Rep {Cont (Sub $2) $3} | + Term Rep {Cont (Add $2) $3} | + Term {Valu (Add $2)} | - Term {Valu (Sub $2)} ;
Term = Num { $1};
Num = #0# {Val $1} | #1# {Val $1} |  #2# {Val $1};



data Expr = Eval Term Rep | Zn Term
  deriving (Eq, Show)

data Rep = Cont Op Rep | Valu Op
  deriving (Eq, Show)

data Op = Add Term | Sub Term | Mult Factor | Divi Factor 
  deriving (Eq, Show)
  
data Factor = Val String
  deriving (Eq, Show)
  
type Term = Factor
  
Сейчас надо добавитьб ( )  умножить и делаить 
<exp> ::= <term> { ("+" | "-") <term> }
<term> ::= <factor> { ("*" | "/") <factor> }
<factor> ::= "(" <exp> ")" | <unary_op> <factor> | <int>
такая грамматика должна быть в итоге 


--------------------------------var 1 
Expr = Term Rep {Eval $1 $2} | Term {$1}; 
Term = Factor Re {Eval $1 $2} | Factor {$1}; 
Factor = #(# Expr #)# {$2} | Num {$1} ; 
Num = #1# {Val $1} | #2# {Val $1}

Rep = + Term Rep {Cont (Add $2) $3} | - Term Rep {Cont (Sub $2) $3} | + Term {End (Add $2)}| - Term {End (Sub $2)}
Re = * Factor Re {Cont (Mult $2) $3} | / Factor Re {Divi (Sub $2) $3} | * Factor {End (Mult $2)}| / Factor {End (Divi $2)}


data Expr = Val String | Eval Expr Rep 
data Rep = Cont Chast Rep | End Chast
data Chast = Add Term | Sub Term | Mult Factor | Divi Factor 



data Prim a =
    Add a a      -- (+)
  | Sub a a      -- (-)
  | Mul a a      -- (*)
  | Div a a      -- (/)
  | Abs a        -- abs
  | Sgn a        -- signum
  deriving Show

data Expr = Val Double | Op (Prim Expr) deriving Show







-----------------var2 

data Expr = Eval Term Rep | Zn Term
  deriving (Eq, Show)

data Rep = Cont Op Rep | Valu Op
  deriving (Eq, Show)

data Re = Cont Op Rep | Valu Op
  deriving (Eq, Show)

data Op = Add Term | Sub Term  
  deriving (Eq, Show)

data Opp = Mult Factor | Divi Factor 
  deriving (Eq, Show)
  
data Factor = Val String
  deriving (Eq, Show)
  
type Term = Factor


  

Expr = Term Rep {Eval $1 $2} | Term {$1} ;
Rep =   - Term Rep {Cont (Sub $2) $3} | + Term Rep {Cont (Add $2) $3} | + Term {Valu (Add $2)} | - Term {Valu (Sub $2)};
Term = Factor Re {Eval $1 $2} | Factor {$1};
Re =   * Factor Re {Cont (Mult $2) $3} | / Factor Re {Cont (Divi $2) $3} | * Factor {Valu (Mult $2)} | / Factor {Valu (Divi $2)};
Factor = #(# Expr #)# {$2} | Num {$1};
Num = #0# {Val $1} | #1# {Val $1} |  #2# {Val $1};




потом написать eval    








лаб 3
Root = #int# #main# #(# #)# Block  {RootBlock $5};
Block =  #{# Text #}# {Blck $2};
Text = Str #;#  {Line $1} | Str #;# Text  {Lines $1 $3} | If Text  {LinesIf $1 $2} | If  {LineIf $1 } | While Text  {LinesWhile $1 $2}| While  {LineWhile $1 }| For Text  {LinesFor $1 $2}| For  {LineFor $1 };


Str: 
  #int# #a# #=# Arithm {Assign $2 $4}
  | #int# #a#          {Declar $2}
  | #a# #= Arithm         {Set $1 $3}
  | #return# Arithm         {Return $2}


Arithm:
  Arithm '+' Arithm   { $1 :+: $3 }
  | Arithm '-' Arithm   { $1 :-: $3 }
  | Arithm '*' Arithm   { $1 :*: $3 }
  | Arithm '/' Arithm   { $1 :/: $3 }
  | Unary             { $1 }
	
Unary:
    cnst                  { Const $1 } 
    | var                 { Var   $1 }

LogicUnary:
    #True#              { BoolValue True }
    | #False#            { BoolValue False }

Cmp:
    Arithm '<'  Arithm      { $1 :<: $3 }
    | Arithm '>'  Arithm    { $1 :>: $3 }
    | Arithm '>='  Arithm   { $1 :>=: $3 }
    | Arithm '<='  Arithm   { $1 :<=: $3 }
    | Arithm '=='  Arithm   { $1 :==: $3 }
    | Arithm '!='  Arithm   { $1 :!=: $3 }

Logic:
    Cmp                 { $1        }
    | LogicUnary        { $1        }	


For: 
    #for# #(# #int# var #=# Arithm #;# Logic #;# var #++# #)# Block {ForExpr $4 $6 $8 $10 $13}

While:
    #while# #(# Logic #)# Block {WhileExpr $3 $5}

If:
    #if# #(# Logic #)# Block    { IfExpr $3 $5  }
    | #if# #(# Logic #)# Block #else# Block { IfElExpr $3 $5 $7 }
 
 
 ---------------
 
 data Text = Line Str 
          | Lines Str Text
          | LineIf IfExpr 
          | LinesIf IfExpr Text
          | LineWhile WhileExpr 
          | LinesWhile WhileExpr Text	
          | LineFor ForExpr 
          | LinesFor ForExpr Text	
          deriving (Eq, Show)


data Block = Blck Text deriving (Eq, Show)
 
data ArithmExpr = Add ArithmExpr ArithmExpr 
                | Sub ArithmExpr ArithmExpr  
                | Multi ArithmExpr ArithmExpr 
                | Divi ArithmExpr ArithmExpr 
                | Const Int
                | Var String				
				deriving (Eq, Show)
				
data Str = Assign String ArithmExpr 
         | Declar String 
         | Set String ArithmExpr
         | Return ArithmExpr
		 deriving (Eq, Show)

data Root = RootBlock Block	
  deriving (Eq, Show)

data LogicExpr = BoolValue Bool 
               | Less ArithmExpr ArithmExpr
               | Greater ArithmExpr ArithmExpr
               | Greatereq ArithmExpr ArithmExpr
               | Lesseq ArithmExpr ArithmExpr
               | Eq ArithmExpr ArithmExpr
               | Noteq ArithmExpr ArithmExpr
               deriving (Eq, Show)

data IfExpr = IfExpr LogicExpr Block
            | IfElExpr LogicExpr Block Block
           	deriving (Eq, Show)

data WhileExpr = WhileExpr LogicExpr Block
  deriving (Eq, Show)


data ForExpr = ForExpr String ArithmExpr LogicExpr String Block
  deriving (Eq, Show)

 
 Root = #int# #main# #(# #)# Block  {RootBlock $5};
Block =  #{# Text #}# {Blck $2};
Text = Str #;#  {Line $1} | Str #;# Text  {Lines $1 $3} | If Text  {LinesIf $1 $2} | If  {LineIf $1 } | While Text  {LinesWhile $1 $2}| While  {LineWhile $1 }| For Text  {LinesFor $1 $2}| For  {LineFor $1 };
Str = #int# #a# #=# Arithm {Assign $2 $4} | #int# #a#          {Declar $2} | #a# #= Arithm         {Set $1 $3} | #return# Arithm         {Return $2};
Arithm = Arithm '+' Arithm   {Add $1 $3 } | Arithm '-' Arithm   {Sub $1 $3 } | Arithm '*' Arithm   {Multi $1 $3 } | Arithm '/' Arithm   {Divi $1 $3 } | Unary { $1 };
Unary = cnst { Const $1 }  | var { Var   $1 };
LogicUnary = #True#  { BoolValue True } #False#   { BoolValue False };
Cmp = Arithm #=#  Arithm      {Less $1 $3 } | Arithm #>#  Arithm    {Greater $1 $3 } | Arithm #>=#  Arithm   {Greatereq $1 $3 } | Arithm #<=#  Arithm   {Lesseq $1 $3 } | Arithm #==#  Arithm   {Eq $1 $3 } | Arithm #!=#  Arithm   {Noteq $1  $3 };
Logic = Cmp  { $1 } | LogicUnary  { $1 }	;
For = #for# #(# #int# var #=# Arithm #;# Logic #;# var #++# #)# Block {ForExpr $4 $6 $8 $10 $13};
While = #while# #(# Logic #)# Block {WhileExpr $3 $5};
If = #if# #(# Logic #)# Block    { IfExpr $3 $5  } | #if# #(# Logic #)# Block #else# Block { IfElExpr $3 $5 $7 };
 
 
 
 
 Root = #int# #main# #(# #)# Block  {RootBlock $5};
Block =  #{# Text #}# {Blck $2};
Text = Str #;#  {Line $1} | Str #;# Text  {Lines $1 $3} ;
Str = #int# #a# #=# Expr {Assign $2 $4} | #int# #a# {Declar $2} | #a# #=# Expr {Set $1 $3} | #return# Expr {Return $2};
